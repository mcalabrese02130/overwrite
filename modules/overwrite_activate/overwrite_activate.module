<?php

use Drupal\comment\CommentInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Menu\LocalTaskDefault;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Utility\Error;
use Drupal\overwrite\EntityTypeInfo;
use Drupal\Core\StringTranslation\TranslatableMarkup;

function overwrite_activate_entity_load(array $entities, $entity_type_id) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

  $current_path = \Drupal::service('path.current')->getPath();
  foreach($entities as $entity) {
    $entity_type = $entity->getEntityType();

    if(!$entity_type->hasLinkTemplate('overwrite')) {
        continue;
    }

    //Do not apply overwrites to Entity Form
    $entity_edit_form = $entity->toUrl('edit-form');
    if($entity_edit_form && $current_path == $entity_edit_form->toString()) {
      continue;
    }

    $overwrite_ids =  \Drupal::entityQuery('overwrite')
      ->condition('related_entity_type', $entity_type_id)
      ->condition('related_entity_id', $entity->id())
      ->execute();
    if(!empty($overwrite_ids)) {
      $overwrites = \Drupal\overwrite\Entity\Overwrite::loadMultiple(array_keys($overwrite_ids));
      foreach($overwrites as $overwrite) {
        $values = $overwrite->getFieldValue();
        $fieldname = $overwrite->getRelatedFieldname();
        switch($overwrite->getMethod()) {
        case 'replace':
          $entity->{$fieldname}->setValue($values->getValue());
          break;
        case 'append':
          foreach($values as $value) {
            $entity->{$fieldname}->appendItem($value->getValue());
          }
          break;
        case 'prepend':
          $field_values = $entity->{$fieldname}->getValue();
          $entity->{$fieldname}->setValue(array_merge($values->getValue(), $field_values));
          break;
        }
      }
    }
  }
}

